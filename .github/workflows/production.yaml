# name: Continuous Integration

# on:
#     push:
#         branches:
#             - 'main'

# jobs:
#     deploy:
#         runs-on: ubuntu-latest
#         env:
#             AWS_S3_BUCKET_NAME: dashboard.myabode.app
#             AWS_CF_DISTRIBUTION_ID: EC2RTPNG6NU4U
#             VITE_APP_APP_BASE: https://dashboard.myabode.app
#             VITE_APP_API_BASE: https://api.abode.ng/api
#         strategy:
#             matrix:
#                 node-version: [14.x]
#         steps:
#             - uses: actions/checkout@master
#             - name: Use Node.js ${{ matrix.node-version }}
#               uses: actions/setup-node@v1
#               with:
#                   node-version: ${{ matrix.node-version }}
#             - name: Install Dependencies
#               run: npm install
#             - name: Build Application
#               run: npm run-script build
#             - uses: jakejarvis/s3-sync-action@master
#               name: Upload App to S3 Bucket
#               with:
#                   args: --follow-symlinks --delete
#               env:
#                   AWS_S3_BUCKET: ${{ env.AWS_S3_BUCKET_NAME }}
#                   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#                   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#                   AWS_REGION: 'us-east-1'
#                   SOURCE_DIR: 'dist'
#             - name: Create CloudFront Cache Invalidation
#               uses: chetan/invalidate-cloudfront-action@master
#               env:
#                   DISTRIBUTION: ${{ env.AWS_CF_DISTRIBUTION_ID }}
#                   PATHS: '/*'
#                   AWS_REGION: 'us-east-1'
#                   AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#                   AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
name: Production Deployment

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Set up PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.3'
        extensions: mbstring, xml, intl

    - name: Get Composer Cache Directory
      id: composer-cache
      run: |
        echo "dir=$(composer config cache-files-dir)" >> $GITHUB_ENV

    - name: Cache Composer dependencies
      uses: actions/cache@v2
      with:
        path: ${{ env.dir }}
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install Composer dependencies
      run: composer install --no-interaction --prefer-dist --optimize-autoloader

    - name: Configure SSH
      run: |
        mkdir -p ~/.ssh/
        echo "${{ secrets.DO_PRIVATE_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa
        ssh-keyscan -H ${{ secrets.DO_HOST }} >> ~/.ssh/known_hosts

    - name: Install Composer on server
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.DO_USERNAME }}@${{ secrets.DO_HOST }} << 'EOF'
          sudo apt update
          sudo apt install -y curl php-cli php-mbstring unzip
          curl -sS https://getcomposer.org/installer -o composer-setup.php
          sudo php composer-setup.php --install-dir=/usr/local/bin --filename=composer
          rm composer-setup.php
        EOF

    - name: Ensure ownership and permissions on target server
      run: |
        ssh -i ~/.ssh/id_rsa ${{ secrets.DO_USERNAME }}@${{ secrets.DO_HOST }} << 'EOF'
          sudo chown -R www-data:www-data /var/www/api.abode.ng/html
          sudo chmod -R 775 /var/www/api.abode.ng/html
        EOF

    - name: Deploy to DigitalOcean
      run: |
        rsync -avz --exclude='.env' --exclude='.git/' --no-perms --no-times -e "ssh -i ~/.ssh/id_rsa" ./ ${{ secrets.DO_USERNAME }}@${{ secrets.DO_HOST }}:/var/www/api.abode.ng/html
        ssh -i ~/.ssh/id_rsa ${{ secrets.DO_USERNAME }}@${{ secrets.DO_HOST }} << 'EOF'
          cd /var/www/api.abode.ng/html
          composer install --no-interaction --prefer-dist --optimize-autoloader
          php artisan migrate --force
          php artisan config:cache
          php artisan route:cache
        EOF

    - name: Clear SSH key
      run: rm ~/.ssh/id_rsa