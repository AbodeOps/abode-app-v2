import{am as n,an as s,P as p}from"./index.34c5d693.js";import{a as d,g as w}from"./helpers.38b13223.js";class c{static async fetchTransactions(){try{return(await n.get("/transactions")).data}catch(t){s(t)}}static async fetchWallet(){try{return(await n.get("/wallets")).data}catch(t){s(t)}}static async fetchBankAccounts(){try{return(await n.get("/bank-accounts")).data}catch(t){s(t)}}static async requestOtp(t){try{return(await n.post("/otp",{purpose:t})).data}catch(e){s(e)}}static async addBank({accountNumber:t,accountName:e,bankCode:r,otp:o}){try{return(await n.post("/bank-accounts",{account_name:e,account_number:t,bank_code:r,otp:o})).data}catch(u){s(u)}}static async resolveBankAccount({accountNumber:t,bankCode:e}){try{return(await n.post("/bank-accounts/resolve",{account_number:t,bank_code:e})).data}catch(r){s(r)}}static async topup({amount:t,reference:e,type:r,bankCode:o,proof:u}){const i=new FormData;i.append("amount",t),i.append("reference",e),i.append("type",r),i.append("paying_bank_code",o),i.append("payment_proof",u);try{return(await n.post("/wallets/topup",i)).data}catch(l){s(l)}}static async withdraw({amount:t,bankId:e,otp:r}){try{return(await n.post("/wallets/withdraw",{amount:t,bank_account_id:e,otp:r})).data}catch(o){s(o)}}}const y=p({id:"transactions",persist:!0,state:()=>({balance:0,totalInflow:0,totalOutflow:0,projectsFunded:0,actualNetWorth:0,potentialNetWorth:0,bankAccounts:[],transactions:[]}),getters:{formattedBalance:a=>d(a.balance),formattedActualNetworth:a=>d(a.actualNetWorth),formattedOutflow:a=>d(a.totalOutflow),formattedInflow:a=>d(a.totalInflow)},actions:{async fetchTransactions(){const a=await c.fetchTransactions();return this.transactions=a.data.map(t=>({id:t.id,amount:t.amount,balance:t.balance,description:t.description,type:t.type,createdAt:t.created_at})),a},async fetchWallet(){const a=await c.fetchWallet();return this.balance=a.data.balance,this.totalInflow=a.data.total_inflow,this.totalOutflow=a.data.total_outflow,this.projectsFunded=a.data.projects_funded,this.actualNetWorth=a.data.actual_networth,this.potentialNetWorth=a.data.potential_networth,a},async fetchBankAccounts(){const a=await c.fetchBankAccounts();return this.bankAccounts=a.data.map(t=>({id:t.id,name:t.account_name,number:t.account_number,bankCode:t.bank_code,bank:w(t.bank_code)})),a},async requestOtp(a){return await c.requestOtp(a)},async addBank(a){return await c.addBank(a)},async resolveBankAccount(a){return await c.resolveBankAccount(a)},async topup(a){return await c.topup(a)},async withdraw(a){return await c.withdraw(a)}}});export{y as u};
